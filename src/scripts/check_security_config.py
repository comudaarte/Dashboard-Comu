#!/usr/bin/env python3
"""
Script de verifica√ß√£o r√°pida das configura√ß√µes de seguran√ßa
Verifica se todas as vari√°veis necess√°rias est√£o configuradas
"""

import sys
import os

# Adiciona o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

def check_security_config():
    """
    Verifica configura√ß√µes de seguran√ßa
    """
    print("üîí Verificando configura√ß√µes de seguran√ßa...")
    print("=" * 50)
    
    try:
        from utils.security_config import security_config
        
        # Verifica configura√ß√£o geral
        is_configured = security_config.is_configured()
        print(f"‚úÖ Configura√ß√£o completa: {is_configured}")
        
        # Verifica SECRET_KEY
        secret_key = security_config.SECRET_KEY
        if secret_key and secret_key != "your-secret-key-here-generate-with-openssl":
            print(f"‚úÖ SECRET_KEY: Configurada ({secret_key[:10]}...)")
        else:
            print("‚ùå SECRET_KEY: N√£o configurada ou inv√°lida")
        
        # Verifica token Guru
        guru_token = security_config.GURU_ACCOUNT_TOKEN
        if guru_token:
            print(f"‚úÖ GURU_ACCOUNT_TOKEN: Configurado ({guru_token[:10]}...)")
        else:
            print("‚ùå GURU_ACCOUNT_TOKEN: N√£o configurado")
        
        # Verifica tokens Ticto
        ticto_tokens = security_config.get_ticto_tokens()
        if ticto_tokens:
            print(f"‚úÖ TICTO_WEBHOOK_TOKENS: {len(ticto_tokens)} token(s) configurado(s)")
            for i, token in enumerate(ticto_tokens, 1):
                print(f"   Token {i}: {token[:10]}...")
        else:
            print("‚ùå TICTO_WEBHOOK_TOKENS: Nenhum token configurado")
        
        # Verifica configura√ß√µes de rate limiting
        rate_limit_min = security_config.RATE_LIMIT_PER_MINUTE
        rate_limit_hour = security_config.RATE_LIMIT_PER_HOUR
        print(f"‚úÖ Rate Limiting: {rate_limit_min}/min, {rate_limit_hour}/hora")
        
        # Verifica hosts permitidos
        allowed_hosts = security_config.ALLOWED_HOSTS
        print(f"‚úÖ ALLOWED_HOSTS: {', '.join(allowed_hosts)}")
        
        print("\n" + "=" * 50)
        
        if is_configured:
            print("üéâ Todas as configura√ß√µes de seguran√ßa est√£o corretas!")
            print("üí° Execute 'python src/scripts/test_security.py' para testes completos")
        else:
            print("‚ö†Ô∏è Algumas configura√ß√µes est√£o faltando ou incorretas")
            print("üí° Verifique o arquivo .env e execute novamente")
        
        return is_configured
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        print("üí° Verifique se est√° executando do diret√≥rio correto")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

if __name__ == "__main__":
    success = check_security_config()
    sys.exit(0 if success else 1)

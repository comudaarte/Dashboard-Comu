# =============================================================================
# DOCKER COMPOSE PARA PRODUÇÃO - DASHBOARD COMU
# =============================================================================
# 
# Este arquivo é otimizado para ambiente de produção com:
# - Configurações de segurança
# - Recursos limitados
# - Restart automático
# - Health checks
# - Logs estruturados
#
# Como usar:
# docker-compose -f docker-compose.prod.yml up -d
#
# Autor: Dashboard Comu Team
# Data: 2025
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # BANCO DE DADOS POSTGRESQL
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: dashboardcomu_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-metrics_db}
      POSTGRES_USER: ${POSTGRES_USER:-metrics_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"  # Apenas localhost para segurança
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backup_logs:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-metrics_user} -d ${POSTGRES_DB:-metrics_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - dashboard_network

  # =============================================================================
  # APLICAÇÃO PRINCIPAL (API + DASHBOARD)
  # =============================================================================
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: dashboardcomu_api_prod
    restart: unless-stopped
    command: python -m src.main
    volumes:
      - .:/app
      - ./logs:/app/logs
    working_dir: /app
    environment:
      - PYTHONPATH=/app/src
      - DATABASE_URL=${DATABASE_URL}
      - ENVIRONMENT=production
      - DEBUG=False
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "127.0.0.1:8000:8000"  # API - apenas localhost
      - "127.0.0.1:8052:8052"  # Dashboard - apenas localhost
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - dashboard_network

  # =============================================================================
  # NGINX - PROXY REVERSO E SSL
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: dashboardcomu_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - dashboard_network

  # =============================================================================
  # BACKUP AUTOMÁTICO
  # =============================================================================
  backup:
    image: postgres:15-alpine
    container_name: dashboardcomu_backup_prod
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-metrics_db}
      POSTGRES_USER: ${POSTGRES_USER:-metrics_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backup_logs:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        echo 'Iniciando backup...' &&
        pg_dump -h db -U ${POSTGRES_USER:-metrics_user} -d ${POSTGRES_DB:-metrics_db} > /backup/backup_$(date +%Y%m%d_%H%M%S).sql &&
        echo 'Backup concluído' &&
        # Manter apenas os últimos 30 backups
        ls -t /backup/backup_*.sql | tail -n +31 | xargs -r rm &&
        echo 'Limpeza de backups antigos concluída'
      "
    depends_on:
      - db
    networks:
      - dashboard_network

# =============================================================================
# VOLUMES PERSISTENTES
# =============================================================================
volumes:
  postgres_data_prod:
    driver: local

# =============================================================================
# REDE INTERNA
# =============================================================================
networks:
  dashboard_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
